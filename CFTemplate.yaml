
AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create a Slack Chat Bot. This template will use SNS, CloudWatch, and Lambda. This bot will
just post to your slack channel on receiving ClouWatch Alarms."

Parameters: 
  SlackChannelName:
    Description: "Name of the Slack channel where the bot will post"
    Type: String
    Default: \#aws-solutions
    ConstraintDescription : 'must begin with a # and contain only alphanumeric characters.'

  SlackWebHookAPI:
    Description: "WebHook API of the Slack Channel. Enter without the https:// protocol. This WebHook will be 
    encrypted using AWS KMS."
    Type: String
    Default: #HookURL
  
  CPUUtilizationThreshold:
    Description: 'CPU Utilization limit to trigger the CloudWatch Alarm'
    Type: Number
    Default: 80
    MinValue: 20
    MaxValue: 100
    ConstraintDescription: 'Min value: 20, Max Value: 100'

  EC2Instance:
    Description: Select the EC2 parameter to watch the CPU Utilization for.
    Type: AWS::EC2::Instance::Id


Resources:
  
  SlackSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaSlackPost.Arn
      Protocol: lambda
      TopicArn: !Ref HighCPUTopic


  HighCPUTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: HighCPUTopic
      TopicName: HighCPUTopic

  LambdaSlackPost:
    Type: AWS::Lambda::Function
    Properties:
      Code:#use code to post to slack here
         ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello World!')
              }
      FunctionName: LambdaSlackPost
      Handler: lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          WEBHOOK_URL: !Ref SlackWebHookAPI
          SlackChannelName: !Ref SlackChannelName
      Role: #either create a role and use the ARN or use the ARN of an existing role

  CPUThresholdBreachAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'CPU alarm for ${EC2Instance} breached the threshold ${CPUUtilizationThreshold}'
      AlarmName: CPUThresholdBreachAlarm
      AlarmActions:
        - !Ref HighCPUTopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref CPUUtilizationThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
