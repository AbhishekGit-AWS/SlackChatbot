AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create a Slack Chat Bot. This template will create an SNS topic,
 a CloudWatch alarm, and Lambda. This bot will just post to your slack channel on receiving ClouWatch Alarms."

Parameters:

  VpcCIDR:
    Description: Please enter the CIDR for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  PublicSubnet1CIDR:
    Description: Please enter the CIDR for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  SlackChannelName:
    Description: "Name of the Slack channel where the bot will post"
    Type: String
    Default: 'YourChannelName'
    ConstraintDescription : 'must begin with a # and contain only alphanumeric characters.'

  SlackWebHookAPI:
    Description: "WebHook API of the Slack Channel. Enter without the https:// protocol. This WebHook will be 
    encrypted using AWS KMS."
    Type: String
    Default: 'YourWebHookAPI'
  
  CPUUtlizationHighThreshold:
    Type: Number
    MinValue: 30
    MaxValue: 100
    Default: 70
    Description: 'An instance will be added if the CPU Utilization breaches the threshold.'
    ConstraintDescription: 'Please select a value between 30 and 100.'

  MonitoringPeriod:
    Type: Number
    Default: 300
    AllowedValues:
      - 60
      - 300
    Description: '60 seconds for detailed monitoring and 300 secoonds for standard.'
  
  CPUHighStatistic:
    Type: String
    AllowedValues:
      - Average
      - Maximum
    Default: Maximum
    Description: 'Select wheter to track the CPU Utilization average or maximum for the Period.'

  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0447a12f28fddb066
    Description: 'Default: Amazon Linux 2 AMI (HVM), SSD Volume Type x86'

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-IG

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable SSH access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort : 22
          CidrIp : 0.0.0.0/0
      Tags:
        - Key: name
          Value: !Sub ${AWS::StackName}-SG

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet: 
          - !Ref InstanceSecurityGroup
      UserData:  
        !Base64 |
        #!/bin/bash
        amazon-linux-extras install epel -y
        yum install stress -y
  
  SlackSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaSlackPost.Arn
      Protocol: lambda
      TopicArn: !Ref HighCPUTopic

  HighCPUTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: HighCPUTopic
      TopicName: HighCPUTopic

  LambdaSlackPost:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import os

          from urllib.request import Request, urlopen
          from urllib.error import URLError, HTTPError

          HOOK_URL = os.environ['SlackWebHookURL']
          SLACK_CHANNEL = os.environ['SlackChannelName']

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("Event: " + str(event))
              message = json.loads(event['Records'][0]['Sns']['Message'])
              logger.info("Message: " + str(message))

              alarm_name = message['AlarmName']
              new_state = message['NewStateValue']
              reason = message['NewStateReason']

              slack_message = {
                  'channel': SLACK_CHANNEL,
                  'text': "%s state is now %s: %s" % (alarm_name, new_state, reason)
              }

              req = Request(HOOK_URL, json.dumps(slack_message).encode('utf-8'))
              try:
                  response = urlopen(req)
                  response.read()
                  logger.info("Message posted to %s", slack_message['channel'])
              except HTTPError as e:
                  logger.error("Request failed: %d %s", e.code, e.reason)
              except URLError as e:
                  logger.error("Server connection failed: %s", e.reason)
        
      FunctionName: LambdaSlackPost
      Handler: index.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          SlackWebHookURL: !Ref SlackWebHookAPI
          SlackChannelName: !Ref SlackChannelName
      Role: !GetAtt LambdaExecutionRole.Arn
      Description: 'Lambda function to post Messages to Slack and write logs to CloudWatch Logs.'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole            
      Description: 'Role for AWS lambda with basic Execute managed policy'
      RoleName: LambdaExecutionRole

  CPUThresholdBreachAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'CPU alarm for ${Instance} breached the threshold ${CPUUtlizationHighThreshold}'
      AlarmName: CPUThresholdBreachAlarm
      AlarmActions:
        - !Ref HighCPUTopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: !Ref CPUHighStatistic
      Period: !Ref MonitoringPeriod
      EvaluationPeriods: 1
      Threshold: !Ref CPUUtlizationHighThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance